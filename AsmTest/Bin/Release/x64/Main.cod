; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??_C@_09LKKOHMJD@?5?$CL?51?08127?$AA@		; `string'
EXTRN	__imp__errno:PROC
EXTRN	__imp_isdigit:PROC
EXTRN	__imp_isspace:PROC
EXTRN	__imp__HUGE:QWORD
;	COMDAT ??_C@_09LKKOHMJD@?5?$CL?51?08127?$AA@
CONST	SEGMENT
??_C@_09LKKOHMJD@?5?$CL?51?08127?$AA@ DB ' + 1,8127', 00H ; `string'
CONST	ENDS
PUBLIC	__mask@@NegDouble@
PUBLIC	__real@4024000000000000
PUBLIC	mystrtod
EXTRN	_fltused:DWORD
;	COMDAT pdata
; File e:\visual studio\projects\programs\64sh\asmtest\main.c
pdata	SEGMENT
$pdata$mystrtod DD imagerel $LN46
	DD	imagerel $LN46+563
	DD	imagerel $unwind$mystrtod
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mystrtod DD 0102e01H
	DD	02782eH
	DD	036829H
	DD	0f741eH
	DD	0e641eH
	DD	0d541eH
	DD	0c341eH
	DD	0e01a721eH
	DD	0c016d018H
xdata	ENDS
;	COMDAT __mask@@NegDouble@
CONST	SEGMENT
__mask@@NegDouble@ DB 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT mystrtod
_TEXT	SEGMENT
str$ = 96
endptr$ = 104
mystrtod PROC						; COMDAT

; 8    : double mystrtod(char *str, char **endptr) {

$LN46:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 54		 push	 r12
  00016	41 55		 push	 r13
  00018	41 56		 push	 r14
  0001a	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0001e	48 8b d9	 mov	 rbx, rcx

; 9    :   double number;
; 10   :   int exponent;
; 11   :   int negative;
; 12   :   char *p = (char *) str;
; 13   :   double p10;
; 14   :   int n;
; 15   :   int num_digits;
; 16   :   int num_decimals;
; 17   : 
; 18   :   // Skip leading whitespace
; 19   :   while (isspace(*p)) p++;

  00021	0f be 09	 movsx	 ecx, BYTE PTR [rcx]
  00024	0f 29 74 24 30	 movaps	 XMMWORD PTR [rsp+48], xmm6
  00029	0f 29 7c 24 20	 movaps	 XMMWORD PTR [rsp+32], xmm7
  0002e	4c 8b f2	 mov	 r14, rdx
  00031	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isspace
  00037	85 c0		 test	 eax, eax
  00039	74 16		 je	 SHORT $LN32@mystrtod
  0003b	0f 1f 44 00 00	 npad	 5
$LL33@mystrtod:
  00040	0f be 4b 01	 movsx	 ecx, BYTE PTR [rbx+1]
  00044	48 ff c3	 inc	 rbx
  00047	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isspace
  0004d	85 c0		 test	 eax, eax
  0004f	75 ef		 jne	 SHORT $LL33@mystrtod
$LN32@mystrtod:

; 20   : 
; 21   :   // Handle optional sign
; 22   :   negative = 0;
; 23   :   switch (*p) {

  00051	0f b6 03	 movzx	 eax, BYTE PTR [rbx]
  00054	33 f6		 xor	 esi, esi
  00056	44 8b ee	 mov	 r13d, esi
  00059	3c 2b		 cmp	 al, 43			; 0000002bH
  0005b	74 08		 je	 SHORT $LN28@mystrtod
  0005d	3c 2d		 cmp	 al, 45			; 0000002dH
  0005f	75 07		 jne	 SHORT $LN30@mystrtod

; 24   :     case '-': negative = 1; // Fall through to increment position

  00061	44 8d 6e 01	 lea	 r13d, QWORD PTR [rsi+1]
$LN28@mystrtod:

; 25   :     case '+': p++;

  00065	48 ff c3	 inc	 rbx
$LN30@mystrtod:

; 26   :   }
; 27   : 
; 28   :   number = 0.;
; 29   :   exponent = 0;
; 30   :   num_digits = 0;
; 31   :   num_decimals = 0;
; 32   : 
; 33   :   // Process string of digits
; 34   :   while (isdigit(*p)) {

  00068	0f be 0b	 movsx	 ecx, BYTE PTR [rbx]
  0006b	66 0f 57 f6	 xorpd	 xmm6, xmm6
  0006f	8b fe		 mov	 edi, esi
  00071	8b ee		 mov	 ebp, esi
  00073	44 8b e6	 mov	 r12d, esi
  00076	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isdigit
  0007c	f2 0f 10 3d 00
	00 00 00	 movsdx	 xmm7, QWORD PTR __real@4024000000000000
  00084	85 c0		 test	 eax, eax
  00086	74 35		 je	 SHORT $LN26@mystrtod
  00088	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL27@mystrtod:

; 35   :     number = number * 10. + (*p - '0');

  00090	0f be 03	 movsx	 eax, BYTE PTR [rbx]
  00093	0f be 4b 01	 movsx	 ecx, BYTE PTR [rbx+1]
  00097	f2 0f 59 f7	 mulsd	 xmm6, xmm7
  0009b	83 e8 30	 sub	 eax, 48			; 00000030H

; 36   :     p++;

  0009e	48 ff c3	 inc	 rbx

; 37   :     num_digits++;

  000a1	ff c5		 inc	 ebp
  000a3	66 0f 6e c0	 movd	 xmm0, eax
  000a7	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  000ab	f2 0f 58 c6	 addsd	 xmm0, xmm6
  000af	66 0f 28 f0	 movapd	 xmm6, xmm0
  000b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isdigit
  000b9	85 c0		 test	 eax, eax
  000bb	75 d3		 jne	 SHORT $LL27@mystrtod
$LN26@mystrtod:

; 38   :   }
; 39   : 
; 40   :   // Process decimal part
; 41   :   if (*p == '.') {

  000bd	80 3b 2e	 cmp	 BYTE PTR [rbx], 46	; 0000002eH
  000c0	75 53		 jne	 SHORT $LN25@mystrtod

; 42   :     p++;
; 43   : 
; 44   :     while (isdigit(*p)) {

  000c2	0f be 4b 01	 movsx	 ecx, BYTE PTR [rbx+1]
  000c6	48 ff c3	 inc	 rbx
  000c9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isdigit
  000cf	85 c0		 test	 eax, eax
  000d1	74 3d		 je	 SHORT $LN23@mystrtod
  000d3	66 66 66 66 66
	0f 1f 84 00 00
	00 00 00	 npad	 13
$LL24@mystrtod:

; 45   :       number = number * 10. + (*p - '0');

  000e0	0f be 03	 movsx	 eax, BYTE PTR [rbx]
  000e3	0f be 4b 01	 movsx	 ecx, BYTE PTR [rbx+1]
  000e7	f2 0f 59 f7	 mulsd	 xmm6, xmm7
  000eb	83 e8 30	 sub	 eax, 48			; 00000030H

; 46   :       p++;

  000ee	48 ff c3	 inc	 rbx

; 47   :       num_digits++;

  000f1	ff c5		 inc	 ebp

; 48   :       num_decimals++;

  000f3	41 ff c4	 inc	 r12d
  000f6	66 0f 6e c0	 movd	 xmm0, eax
  000fa	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  000fe	f2 0f 58 c6	 addsd	 xmm0, xmm6
  00102	66 0f 28 f0	 movapd	 xmm6, xmm0
  00106	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isdigit
  0010c	85 c0		 test	 eax, eax
  0010e	75 d0		 jne	 SHORT $LL24@mystrtod
$LN23@mystrtod:

; 49   :     }
; 50   : 
; 51   :     exponent -= num_decimals;

  00110	41 8b fc	 mov	 edi, r12d
  00113	f7 df		 neg	 edi
$LN25@mystrtod:

; 52   :   }
; 53   : 
; 54   :   if (num_digits == 0) {

  00115	85 ed		 test	 ebp, ebp
  00117	75 15		 jne	 SHORT $LN22@mystrtod

; 55   :     errno = ERANGE;

  00119	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno

; 56   :     return 0.0;

  0011f	66 0f 57 c0	 xorpd	 xmm0, xmm0
  00123	c7 00 22 00 00
	00		 mov	 DWORD PTR [rax], 34	; 00000022H
  00129	e9 dc 00 00 00	 jmp	 $LN34@mystrtod
$LN22@mystrtod:

; 57   :   }
; 58   : 
; 59   :   // Correct for sign
; 60   :   if (negative) number = -number;

  0012e	45 85 ed	 test	 r13d, r13d
  00131	74 08		 je	 SHORT $LN21@mystrtod
  00133	66 0f 57 35 00
	00 00 00	 xorpd	 xmm6, QWORD PTR __mask@@NegDouble@
$LN21@mystrtod:

; 61   : 
; 62   :   // Process an exponent string
; 63   :   if (*p == 'e' || *p == 'E') {

  0013b	0f b6 03	 movzx	 eax, BYTE PTR [rbx]
  0013e	3c 65		 cmp	 al, 101			; 00000065H
  00140	74 04		 je	 SHORT $LN19@mystrtod
  00142	3c 45		 cmp	 al, 69			; 00000045H
  00144	75 4e		 jne	 SHORT $LN11@mystrtod
$LN19@mystrtod:

; 64   :     // Handle optional sign
; 65   :     negative = 0;
; 66   :     switch (*++p) {

  00146	0f b6 43 01	 movzx	 eax, BYTE PTR [rbx+1]
  0014a	48 ff c3	 inc	 rbx
  0014d	8b ee		 mov	 ebp, esi
  0014f	3c 2b		 cmp	 al, 43			; 0000002bH
  00151	74 09		 je	 SHORT $LN15@mystrtod
  00153	3c 2d		 cmp	 al, 45			; 0000002dH
  00155	75 08		 jne	 SHORT $LN17@mystrtod

; 67   :       case '-': negative = 1;   // Fall through to increment pos

  00157	bd 01 00 00 00	 mov	 ebp, 1
$LN15@mystrtod:

; 68   :       case '+': p++;

  0015c	48 ff c3	 inc	 rbx
$LN17@mystrtod:

; 69   :     }
; 70   : 
; 71   :     // Process string of digits
; 72   :     n = 0;
; 73   :     while (isdigit(*p)) {

  0015f	0f be 0b	 movsx	 ecx, BYTE PTR [rbx]
  00162	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isdigit
  00168	85 c0		 test	 eax, eax
  0016a	74 1e		 je	 SHORT $LN13@mystrtod
  0016c	0f 1f 40 00	 npad	 4
$LL14@mystrtod:

; 74   :       n = n * 10 + (*p - '0');

  00170	0f be 03	 movsx	 eax, BYTE PTR [rbx]
  00173	8d 0c b6	 lea	 ecx, DWORD PTR [rsi+rsi*4]

; 75   :       p++;

  00176	48 ff c3	 inc	 rbx
  00179	8d 74 48 d0	 lea	 esi, DWORD PTR [rax+rcx*2-48]
  0017d	0f be 0b	 movsx	 ecx, BYTE PTR [rbx]
  00180	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isdigit
  00186	85 c0		 test	 eax, eax
  00188	75 e6		 jne	 SHORT $LL14@mystrtod
$LN13@mystrtod:

; 76   :     }
; 77   : 
; 78   :     if (negative) {

  0018a	85 ed		 test	 ebp, ebp
  0018c	74 04		 je	 SHORT $LN12@mystrtod

; 79   :       exponent -= n;

  0018e	2b fe		 sub	 edi, esi

; 80   :     } else {

  00190	eb 02		 jmp	 SHORT $LN11@mystrtod
$LN12@mystrtod:

; 81   :       exponent += n;

  00192	03 fe		 add	 edi, esi
$LN11@mystrtod:

; 82   :     }
; 83   :   }
; 84   : 
; 85   :   if (exponent < DBL_MIN_EXP  || exponent > DBL_MAX_EXP) {

  00194	8d 87 fd 03 00
	00		 lea	 eax, DWORD PTR [rdi+1021]
  0019a	3d fd 07 00 00	 cmp	 eax, 2045		; 000007fdH
  0019f	77 52		 ja	 SHORT $LN9@mystrtod

; 88   :   }
; 89   : 
; 90   :   // Scale the result
; 91   :   p10 = 10.;
; 92   :   n = exponent;

  001a1	8b c7		 mov	 eax, edi

; 93   :   if (n < 0) n = -n;

  001a3	85 ff		 test	 edi, edi
  001a5	79 02		 jns	 SHORT $LN40@mystrtod
  001a7	f7 d8		 neg	 eax
$LN40@mystrtod:

; 94   :   while (n) {

  001a9	85 c0		 test	 eax, eax
  001ab	74 1d		 je	 SHORT $LN6@mystrtod
  001ad	0f 1f 00	 npad	 3
$LL7@mystrtod:

; 95   :     if (n & 1) {

  001b0	a8 01		 test	 al, 1
  001b2	74 0e		 je	 SHORT $LN3@mystrtod

; 96   :       if (exponent < 0) {

  001b4	85 ff		 test	 edi, edi
  001b6	79 06		 jns	 SHORT $LN4@mystrtod

; 97   :         number /= p10;

  001b8	f2 0f 5e f7	 divsd	 xmm6, xmm7

; 98   :       } else {

  001bc	eb 04		 jmp	 SHORT $LN3@mystrtod
$LN4@mystrtod:

; 99   :         number *= p10;

  001be	f2 0f 59 f7	 mulsd	 xmm6, xmm7
$LN3@mystrtod:

; 100  :       }
; 101  :     }
; 102  :     n >>= 1;

  001c2	d1 f8		 sar	 eax, 1

; 103  :     p10 *= p10;

  001c4	f2 0f 59 ff	 mulsd	 xmm7, xmm7
  001c8	75 e6		 jne	 SHORT $LL7@mystrtod
$LN6@mystrtod:

; 104  :   }
; 105  : 
; 106  :   if (number == HUGE_VAL) errno = ERANGE;

  001ca	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp__HUGE
  001d1	66 0f 2e 30	 ucomisd xmm6, QWORD PTR [rax]
  001d5	7a 0e		 jp	 SHORT $LN2@mystrtod
  001d7	75 0c		 jne	 SHORT $LN2@mystrtod
  001d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  001df	c7 00 22 00 00
	00		 mov	 DWORD PTR [rax], 34	; 00000022H
$LN2@mystrtod:

; 107  :   if (endptr) *endptr = p;

  001e5	4d 85 f6	 test	 r14, r14
  001e8	74 03		 je	 SHORT $LN1@mystrtod
  001ea	49 89 1e	 mov	 QWORD PTR [r14], rbx
$LN1@mystrtod:

; 108  : 
; 109  :   return number;

  001ed	66 0f 28 c6	 movapd	 xmm0, xmm6
  001f1	eb 17		 jmp	 SHORT $LN34@mystrtod
$LN9@mystrtod:

; 86   :     errno = ERANGE;

  001f3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  001f9	c7 00 22 00 00
	00		 mov	 DWORD PTR [rax], 34	; 00000022H

; 87   :     return HUGE_VAL;

  001ff	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp__HUGE
  00206	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
$LN34@mystrtod:

; 110  : }

  0020a	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  0020f	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  00214	48 8b 74 24 70	 mov	 rsi, QWORD PTR [rsp+112]
  00219	0f 28 74 24 30	 movaps	 xmm6, XMMWORD PTR [rsp+48]
  0021e	0f 28 7c 24 20	 movaps	 xmm7, XMMWORD PTR [rsp+32]
  00223	48 8b 7c 24 78	 mov	 rdi, QWORD PTR [rsp+120]
  00228	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0022c	41 5e		 pop	 r14
  0022e	41 5d		 pop	 r13
  00230	41 5c		 pop	 r12
  00232	c3		 ret	 0
mystrtod ENDP
_TEXT	ENDS
PUBLIC	main
EXTRN	memset:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$main DD	imagerel $LN3
	DD	imagerel $LN3+55
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main DD	020701H
	DD	0850107H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT main
_TEXT	SEGMENT
b$ = 32
end$ = 1072
main	PROC						; COMDAT

; 114  : 	   { 

$LN3:
  00000	48 81 ec 28 04
	00 00		 sub	 rsp, 1064		; 00000428H

; 115  : 		char buffer[]	= " + 1,8127" ;
; 116  : 		char b[1024] ;
; 117  : 		char * end ;
; 118  : 
; 119  : 		memset ( b, 0, sizeof ( b )) ;

  00007	48 8d 4c 24 20	 lea	 rcx, QWORD PTR b$[rsp]
  0000c	33 d2		 xor	 edx, edx
  0000e	41 b8 00 04 00
	00		 mov	 r8d, 1024		; 00000400H
  00014	e8 00 00 00 00	 call	 memset

; 120  : 		return ( mystrtod ( b, & end ) ) ;

  00019	48 8d 94 24 30
	04 00 00	 lea	 rdx, QWORD PTR end$[rsp]
  00021	48 8d 4c 24 20	 lea	 rcx, QWORD PTR b$[rsp]
  00026	e8 00 00 00 00	 call	 mystrtod
  0002b	f2 0f 2c c0	 cvttsd2si eax, xmm0

; 121  : 	   }

  0002f	48 81 c4 28 04
	00 00		 add	 rsp, 1064		; 00000428H
  00036	c3		 ret	 0
main	ENDP
_TEXT	ENDS
END

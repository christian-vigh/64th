;**************************************************************************************************************
;*
;*  NAME
;*	FormatString.asm
;*
;*   DESCRIPTION
;*	Equivalent of the C-language sprintf() function.
;*
;*  AUTHOR
;* 	Christian Vigh, 12/2012.
;*
;*   HISTORY
;*   [Version : 1.0]    [Date : 2012/12/01]     [Author : CV]
;*	Initial version.
;*
;**************************************************************************************************************/


;
; Masm32 include files.
;
.NOCREF
	INCLUDE		Kernel32.inc
	INCLUDE		User32.inc
.CREF

;
; Generic include files
;
.NOLIST
	INCLUDE		Macros.inc
	INCLUDE		Assembler.inc
	INCLUDE		String.inc
.LIST

.CODE


;==============================================================================================================
;=
;=   NAME
;=	FormatString@ - formats a string.
;=
;=   DESCRIPTION
;=	Equivalent of the C sprintf() function.
;=
;=   INPUT
;=	RCX -
;=		Pointer to the format string.
;=
;=	RDX -
;=		Destination buffer.
;=
;=	Stack -
;=		Each "%something" construct in the format string references a parameter which must be pushed
;=		onto the stack, into reversed order.
;=
;=   OUTPUT
;=	RAX -
;=		Pointer to the start of the destination buffer.
;=
;=   REGISTERS USED
;=	None.
;=
;=   NOTES
;=	The supported formats are the following :
;=
;===============================================================================================================*/
String$FormatString	PROC
	PUSHREGS	RCX, RDX, RBP, RSI, RDI, R15

	MOV		RSI, RCX					; Pointer to format string
	MOV		RDI, RDX					; Pointer to destination string
	MOV		R15, RDX					; Save pointer to the start of the destination string
	LEA		RBP, [ RSP + ( ( @PUSHEDREGS + 1 ) * 8 ) ]	; Get access to the parameters that were pushed in reverse order

	; Main scan loop
FormatLoop :
	LODSB								; Get next char
	OR		AL, AL						; We're over when we find the trailing zero
	JZ		FormatEnd

	STOSB								; Store current char
	JMP		FormatLoop					; And process next

	; The whole formatting process is over ; return the address of the destination buffer into RAX
FormatEnd :
	MOV		RAX, R15

	POPREGS
	RET
String$FormatString	ENDP

END